#!/usr/bin/env python3
"""
Script para empaquetar la aplicaci√≥n Taller Mec√°nico como ejecutable .exe
Usando PyInstaller para crear un archivo ejecutable independiente
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_pyinstaller():
    """Verificar si PyInstaller est√° instalado"""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller encontrado")
        return True
    except ImportError:
        print("‚ùå PyInstaller no encontrado")
        return False

def install_pyinstaller():
    """Instalar PyInstaller si no est√° disponible"""
    print("üì¶ Instalando PyInstaller...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("‚úÖ PyInstaller instalado correctamente")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Error instalando PyInstaller")
        return False

def create_spec_file():
    """Crear archivo .spec para PyInstaller"""
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[],
    hiddenimports=[
        'tkinter',
        'tkinter.ttk',
        'tkinter.messagebox',
        'tkinter.filedialog',
        'sqlite3',
        'datetime',
        'os',
        'sys'
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='TallerMecanico',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,
    version_file=None,
)
'''
    
    with open('TallerMecanico.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print("‚úÖ Archivo .spec creado")

def build_executable():
    """Construir el ejecutable usando PyInstaller"""
    print("üî® Construyendo ejecutable...")
    
    try:
        # Usar el archivo .spec personalizado
        subprocess.check_call([
            sys.executable, "-m", "PyInstaller",
            "--clean",
            "TallerMecanico.spec"
        ])
        print("‚úÖ Ejecutable construido correctamente")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error construyendo ejecutable: {e}")
        return False

def create_installer_package():
    """Crear paquete de instalaci√≥n"""
    print("üì¶ Creando paquete de instalaci√≥n...")
    
    # Directorio de distribuci√≥n
    dist_dir = Path("dist")
    if not dist_dir.exists():
        print("‚ùå Directorio dist no encontrado")
        return False
    
    # Crear directorio para el paquete
    package_dir = Path("TallerMecanico_Package")
    if package_dir.exists():
        shutil.rmtree(package_dir)
    
    package_dir.mkdir()
    
    # Copiar ejecutable
    exe_file = dist_dir / "TallerMecanico.exe"
    if exe_file.exists():
        shutil.copy2(exe_file, package_dir)
        print("‚úÖ Ejecutable copiado")
    else:
        print("‚ùå Ejecutable no encontrado")
        return False
    
    # Copiar README
    readme_file = Path("README.md")
    if readme_file.exists():
        shutil.copy2(readme_file, package_dir)
        print("‚úÖ README copiado")
    
    # Crear archivo de instalaci√≥n
    install_bat = package_dir / "Instalar.bat"
    install_content = '''@echo off
echo Instalando Sistema de Gestion Taller Mecanico...
echo.
echo El sistema se instalara en el directorio actual.
echo.
echo Presione cualquier tecla para continuar...
pause >nul
echo.
echo Instalacion completada!
echo.
echo Para ejecutar el sistema, haga doble clic en TallerMecanico.exe
echo.
pause
'''
    
    with open(install_bat, 'w', encoding='utf-8') as f:
        f.write(install_content)
    
    print("‚úÖ Archivo de instalaci√≥n creado")
    
    # Crear archivo de desinstalaci√≥n
    uninstall_bat = package_dir / "Desinstalar.bat"
    uninstall_content = '''@echo off
echo Desinstalando Sistema de Gestion Taller Mecanico...
echo.
echo ¬øEst√° seguro de que desea desinstalar el sistema? (S/N)
set /p confirm=
if /i "%confirm%"=="S" (
    echo.
    echo Eliminando archivos...
    del TallerMecanico.exe
    del README.md
    del Instalar.bat
    del Desinstalar.bat
    echo.
    echo Sistema desinstalado correctamente.
) else (
    echo.
    echo Desinstalacion cancelada.
)
echo.
pause
'''
    
    with open(uninstall_bat, 'w', encoding='utf-8') as f:
        f.write(uninstall_content)
    
    print("‚úÖ Archivo de desinstalaci√≥n creado")
    
    # Crear archivo de informaci√≥n
    info_txt = package_dir / "INFORMACION.txt"
    info_content = '''SISTEMA DE GESTI√ìN PARA TALLER MEC√ÅNICO
================================================

ARCHIVOS INCLUIDOS:
- TallerMecanico.exe: Aplicaci√≥n principal
- README.md: Documentaci√≥n del sistema
- Instalar.bat: Script de instalaci√≥n
- Desinstalar.bat: Script de desinstalaci√≥n

INSTRUCCIONES DE INSTALACI√ìN:
1. Ejecutar "Instalar.bat" para la instalaci√≥n autom√°tica
2. O copiar manualmente los archivos a la ubicaci√≥n deseada
3. Ejecutar "TallerMecanico.exe" para iniciar el sistema

USUARIOS POR DEFECTO:
- Administrador: admin / admin123
- Taller: taller / taller123
- Bodega: bodega / bodega123
- Ventas: ventas / ventas123

NOTAS:
- El sistema crea autom√°ticamente la base de datos en la primera ejecuci√≥n
- No requiere instalaci√≥n de Python ni dependencias adicionales
- Funciona en Windows 10/11 sin requisitos especiales

SOPORTE:
Para soporte t√©cnico, contactar al equipo de desarrollo.
'''
    
    with open(info_txt, 'w', encoding='utf-8') as f:
        f.write(info_content)
    
    print("‚úÖ Archivo de informaci√≥n creado")
    
    return True

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO PROCESO DE EMPAQUETADO")
    print("=" * 50)
    
    # Verificar PyInstaller
    if not check_pyinstaller():
        if not install_pyinstaller():
            print("‚ùå No se pudo instalar PyInstaller. Abortando...")
            return False
    
    # Crear archivo .spec
    create_spec_file()
    
    # Construir ejecutable
    if not build_executable():
        print("‚ùå Error en la construcci√≥n. Abortando...")
        return False
    
    # Crear paquete de instalaci√≥n
    if not create_installer_package():
        print("‚ùå Error creando paquete. Abortando...")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ EMPAQUETADO COMPLETADO EXITOSAMENTE!")
    print("=" * 50)
    print("\nArchivos generados:")
    print("üìÅ dist/TallerMecanico.exe - Ejecutable principal")
    print("üìÅ TallerMecanico_Package/ - Paquete completo de instalaci√≥n")
    print("\nEl paquete est√° listo para distribuci√≥n.")
    print("Copie la carpeta 'TallerMecanico_Package' a la m√°quina destino.")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\n‚úÖ Proceso completado. Presione Enter para salir...")
        else:
            print("\n‚ùå Proceso fall√≥. Presione Enter para salir...")
        input()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Proceso interrumpido por el usuario.")
        print("Presione Enter para salir...")
        input()
    except Exception as e:
        print(f"\n\nüí• Error inesperado: {e}")
        print("Presione Enter para salir...")
        input()
